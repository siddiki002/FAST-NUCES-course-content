===================		QUESTION 1		========
#include<stdio.h>
#include <sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main() {
int pid = fork();
if (pid < 0)
{
printf ("Unsuccessful child creation");
exit(1);
}
else if (pid > 0){
wait(NULL);
int i;
for (i=0;i<=10;i++)
{
	if (i%2==0)
	{
	printf("%d ",i); 
	}
}
printf("\nParent ends\n");
}
else if(pid==0)
{
printf("\nParent id is: %d\n",getppid());
int i;
for (i=1;i<=10;i++)
{
	if (i%2!=0)
	{
	printf("%d ",i);
	}
}
printf("\nChild ends\n\n");
}
return 0;
}

===================		QUESTION 2		========

#include<stdio.h>
#include <sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int main() 
{
	pid_t pid;
	int n;
	printf("Enter n");
	scanf("%d",&n);
	int i=1;
	while(i<n)
	{
		pid=fork();
		i++;		//i increases as child process is created
		if(pid<0){
		printf("Unsuccessful creation\n");
		exit(1);
		}
		else if (pid==0)
		{
		printf("My process id is %d\nMy parent process id is %d\n\n",getpid(),getppid());
		}
		else if(pid>0)
		{
			wait(NULL);
		}
	
	}
	return 0;
}
===================		QUESTION 3		============================
#include<stdio.h>
#include <sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int i=0;
int main() 
{
	pid_t pid;
	pid = fork();
	if (pid<0)
	{
	printf("Unsuccessful creation");
	exit(1);
	}
	else if (pid==0)
	{
	i++;
	pid = fork();
	if  (pid>0)
	{
		wait(NULL);
		printf("\n Process %d terminated\n\n",i);
	}
	else if (pid==0)
	{
		i++;
		pid=fork();
		if (pid>0)
		{
		wait (NULL);
		printf("\n Process %d terminated\n\n",i);
		}
		else if (pid==0)
		{
		printf("\nProcess 3 is terminated\n\n");
		}
	}
	}
	else if (pid >0)
	{
	wait(NULL);
	printf("Parent terminated\n");
	}
	return 0;
}
===================		QUESTION 4		============================
#include<stdio.h>
#include <sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
int i=0;
int main() 
{
	pid_t pid;
	pid = fork();
	if (pid<0)
	{
	printf("Unsuccessful creation");
	exit(1);
	}
	else if (pid==0)
	{
	i++;
	pid = fork();
	if  (pid>0)
	{
		wait(NULL);
		printf("\nProcess %d terminated\n\n",i);
	}
	else if (pid==0)
	{
		i++;
		pid=fork();
		if (pid>0)
		{
		wait (NULL);
		printf("\nProcess %d terminated\n\n",i);
		}
		else if (pid==0)
		{
		i++;
		pid=fork();
		if (pid>0)
		{
		wait (NULL);
		printf("\nProcess %d is terminated\n\n",i);
		}
		else if (pid==0)
		{
		printf("\nProcess 4 is terminated\n\n");
		}
		}
	}
	}
	else if (pid >0)
	{
	wait(NULL);
	printf("Parent terminated\n");
	}
	return 0;
}
===================		QUESTION 5		============================
i)
#include<stdio.h>
#include <sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
//int i=0;
int main() 
{
	pid_t pid,pid2,pid3;
	pid2 = fork();
	if (pid2<0)
	{
	printf("Child not created");
	exit(1);
	}
	else if (pid2==0)
	{
	printf("I am process 5 and my pid is %d", getpid());
	}
	else if (pid2 >0)
	{
	pid = fork();	//process 3 is created
	if (pid==0) //process 3 execution
	{
		pid3=fork();// process 4 is created
		if (pid3==0)//process 4 execution
		{
		printf("I am process 4 and my pid is %d",getpid());
		}
		if (pid3>0)
		{
		wait(NULL);
		printf("I am process 3 and my pid is %d",getpid());
		}
		
		
	}
	else if (pid>0)
	{
		wait(NULL);
		printf("I am process 1 and my pid is %d",getpid());
	}
	

	}
	return 0;
}
ii)
#include<stdio.h>
#include <sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
//int i=0;
int main() 
{
	pid_t pid;
	pid=fork();
	if (pid==0)
	{
	printf("I am process 9 and my pid is %d",getpid());
	}
	else if (pid>0)
	{
	wait(NULL);
	printf("I am process 6 and my pid is %d",getpid());
	}
	return 0;
}
iii)
#include<stdio.h>
#include <sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
//int i=0;
int main() 
{
	pid_t pid1,pid2,pid3;
	pid1 = fork();
	if (pid1>0)
	{
	wait(NULL);
	printf("I am process 8 and my PID is %d",getpid());
	}
	else if(pid1==0)
	{
	pid2 = fork();
	if (pid2==0)
	{
	//sleep(4);
	printf("I am process 7 and my pid is %d",getpid());
	}
	else if (pid2>0)
	{
	pid3 = fork();
	if (pid3==0)
	{
	printf("I am process 2 and my pid is %d",getpid());
	}
	else if (pid3>0)
	{
	wait(NULL);
	printf("I am process 0 and my pid is %d",getpid());
	}
	
	
	}
	
	}
	return 0;
}
iv)
#include<stdio.h>
#include <sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
//int i=0;
int main() 
{
	pid_t pid1,pid2,pid3,pid4;
	pid1 = fork();
	if (pid1>0)
	{
	wait(NULL);
	pid2 = fork();
	if (pid2==0)
	{
	printf("I am process leaf and my PID is %d",getpid());
	}
	else if (pid2>0)
	{
	wait(NULL);
	printf("I am process root and my PID is %d",getpid());
	}
	}
	else if (pid1==0)
	{
	pid3 = fork();
	if (pid3==0)
	{
	printf("I am process leaf and my PID is %d",getpid());
	}
	else if (pid3>0)
	{
	wait(NULL);
	pid4 = fork();
	if (pid4==0)
	{
	printf("I am process leaf and my PID is %d",getpid());
	}
	else if (pid4>0)
	{
	wait(NULL);
	printf("I am process internal node and my PID is %d",getpid());
	}
	}
	}
	
	return 0;
}
v)
#include<stdio.h>
#include <sys/types.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>
//int i=0;
int main() 
{
	pid_t pid1,pid2,pid3,pid4,pid5,pid6;
	pid1 = fork();
	if (pid1>0)
	{
	wait(NULL);
	pid4 = fork();
	if(pid4>0)
	{
	wait(NULL);
	pid5 = fork();
	if (pid5>0)
	{
	wait(NULL);
	printf("\nI am process 6 and my PID is %d\n",getpid());
	printf("\nI am process 10 and my PID is %d\n",getppid());
	}
	else if(pid5==0)
	{
	printf("\nI am process 4 and my PID is %d\n",getpid());
	}
	}
	else if (pid4==0)
	{
	printf("\nI am process 8 and my PID is %d\n",getpid());
	}
	}
	else if (pid1==0)
	{
	pid2 = fork();
	if (pid2>0)
	{
	wait(NULL);
	pid3=fork();
	if (pid3>0){
	wait(NULL);
	printf("\nI am process 18 and my PID is %d\n",getpid());
	}
	else if (pid3==0)
	{
	printf("\nI am process 21 and my PID is %d\n",getpid());
	}
	}
	else if (pid2==0)
	{
	printf("\nI am process 15 and my PID is %d\n",getpid());
	}
	}
	return 0;
}
vi)
#include<stdio.h>
#include <sys/types.h>
#include<unistd.h>
#include<sys/wait.h>
#include<stdlib.h>
//int i=0;
int main()
{

   printf("My name is process A and PID is %d\n",getpid());
   
   pid_t pid,pid1,pid3,pid4,pid5;

   pid=fork();
    
   if(pid==0)
{
  printf("My name is B and PID is %d\n",getpid());
  
  pid1=fork();
  if(pid1==0)
{
   printf("My name is D and PID is %d\n",getpid());
   exit(0);
}
 
else if(pid1 > 0)
{ 
   wait(NULL);

}

}
 
else if(pid > 0) {

wait(NULL);

pid3=fork();

if(pid3==0)
{
   printf("My Name is C and PID is %d\n",getpid());
   
   pid4=fork();
  if(pid4==0)
{
   printf("My name is E and PID is %d\n",getpid());
   exit(0);
}
 
else if(pid4 > 0)
{ 
   wait(NULL);
   pid5=fork();
   if(pid5==0)
{
   printf("My name is F and PID is %d\n",getpid());
   exit(0);
}

else if(pid5 > 0)
{
   wait(NULL);
}

}


}

else if(pid3 > 0)
{
  wait(NULL);
}

}
return 0;
}

vii)
#include<stdio.h>
#include <sys/types.h>
#include<unistd.h>
#include<sys/wait.h>
#include<stdlib.h>
//int i=0;
int main()
{

   printf("My name is A and PID is %d\n",getpid());
   
   pid_t pid,pid1,pid2,pid3,pid4,pid5;

   pid=fork();
    
   if(pid==0)
{
  printf("My name is B and PID is %d\n",getpid());
  
  pid1=fork();
  if(pid1==0)
{
   printf("My name is E and PID is %d\n",getpid());
   exit(0);
}
 
else if(pid1 > 0)
{ 
   wait(NULL);

}

}
 
else if(pid > 0) {

wait(NULL);

pid3=fork();

if(pid3==0)
{
   printf("My name is C and PID is %d\n",getpid());
   
   pid4=fork();
  if(pid4==0)
{
   printf("My name is F and PID is %d\n",getpid());
   exit(0);
}
 
else if(pid4 > 0)
{ 
   wait(NULL);
   pid5=fork();
   if(pid5==0)
{
   printf("My name is G and PID is %d\n",getpid());
   exit(0);
}

else if(pid5 > 0)
{
   wait(NULL);
}

}


}

else if(pid3 > 0)
{
  wait(NULL);
  pid2=fork();

  if(pid2==0)
{
   printf("My name is D and PID is %d\n",getpid());
   exit(0);
}

else if(pid2 > 0)
{ 
  wait(NULL);
}
}

}
return 0;
}
viii)
#include<stdio.h>
#include <sys/types.h>
#include<unistd.h>
#include<sys/wait.h>
#include<stdlib.h>
//int i=0;
int main()
{

   printf("My name is A and PID is %d\n",getpid());
   
   pid_t pid,pid1,pid2,pid3,pid4,pid5,pid6;

   pid=fork();
    
   if(pid==0)
{
  printf("My name is B and PID is %d\n",getpid());
  
  pid1=fork();
  if(pid1==0)
{
   printf("My name is E and PID is %d\n",getpid());
   exit(0);
}
 
else if(pid1 > 0)
{ 
   wait(NULL);
   pid2=fork();
   if(pid2==0)
{
   printf("My name is F and PID is %d\n",getpid());
   exit(0);
}

else if(pid2 > 0)
{
   wait(NULL);
}

}

}
 
else if(pid > 0) {

wait(NULL);

pid6=fork();
if(pid6==0)
{
  printf("My name is C and PID is %d\n",getpid());
   exit(0);
}

else if(pid6 > 0)
{
wait(NULL);
pid3=fork();

if(pid3==0)
{
   printf("My name is D and PID is %d\n",getpid());
   
   pid4=fork();
  if(pid4==0)
{
   printf("My name is G and PID is %d\n",getpid());
   exit(0);
}
 
else if(pid4 > 0)
{ 
   wait(NULL);
   pid5=fork();
   if(pid5==0)
{
   printf("My name is H and PID is %d\n",getpid());
   exit(0);
}

else if(pid5 > 0)
{
   wait(NULL);
}

}


}

else if(pid3 > 0)
{
  wait(NULL);
}
}
}
return 0;
}
ix)
#include<stdio.h>
#include <sys/types.h>
#include<unistd.h>
#include<sys/wait.h>
#include<stdlib.h>
//int i=0;
int main()
{

   printf("My name is 1 and PID is %d\n",getpid());
   
   pid_t pid,pid1,pid2,pid3,pid4,pid5,pid6,pid7;

   pid=fork();
    
   if(pid==0)
{
  printf("My name is 2 and PID is %d\n",getpid());
  
  pid1=fork();
  if(pid1==0)
{
   printf("My name is 4 and PID is %d\n",getpid());
   
   pid6=fork();
   if(pid6==0)
{
  printf("My name is 8 and PID is %d\n",getpid());
  exit(0);
}
 
else if(pid6>0)
{
  wait(NULL);
  pid7=fork();
  if(pid7==0)
{
  printf("My name is 9 and PID is %d\n",getpid());
  exit(0);
}

else if(pid7 > 0)
{
  wait(NULL);
}
}

}
 
else if(pid1 > 0)
{ 
   wait(NULL);
   pid2=fork();
   if(pid2==0)
{
   printf("My name is 5 and PID is %d\n",getpid());
   exit(0);
}

else if(pid2 > 0)
{
   wait(NULL);
}

}

}
 
else if(pid > 0) {

wait(NULL);

pid3=fork();

if(pid3==0)
{
   printf("My name is 3 and PID is %d\n",getpid());
   
   pid4=fork();
  if(pid4==0)
{
   printf("My name is 6 and PID is %d\n",getpid(),);
   exit(0);
}
 
else if(pid4 > 0)
{ 
   wait(NULL);
   pid5=fork();
   if(pid5==0)
{
   printf("My name is 7 and PID is %d\n",getpid());
   exit(0);
}

else if(pid5 > 0)
{
   wait(NULL);
}

}


}

else if(pid3 > 0)
{
  wait(NULL);
}

}
return 0;
}

